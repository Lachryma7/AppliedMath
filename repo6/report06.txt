1.
スクリプトをex1_scr.txt、データをex1_data.txtとする。
それぞれのファイルの中身と実行結果を以下に示す。

cat ex1_scr.txt
----------------------------------------
#!/usr/bin/awk -f
{
    sum = sum + $1
    sum_sq = sum_sq + $1 * $1
}
END{
    ave = sum/NR
    var = sum_sq / NR - ave * ave
    print ave, var
}
----------------------------------------


cat ex1_data.txt
----------------------------------------
82
20
45
56
45
72
92
75
82
26
----------------------------------------

実行結果
----------------------------------------
> cat ex1_data.txt | ./ex1_scr.txt
59.5 558.05
----------------------------------------

平均は59.5、分散は558.05という結果になった。
分散は「(二乗の平均) - (平均の二乗)」を計算して求めた。


2.
スクリプトをex2.txtとし、calの出力を入力データとする。
ファイルの中身と実行結果を以下に示す。

ex2.txt
----------------------------------------
{if($5!="")x=$5}
END{print x}
----------------------------------------

実行結果
----------------------------------------
> cal | awk -f ex2.txt
26
----------------------------------------

動作状況の様子を説明する。
calコマンドは日、月、火、...の順で表示されるため、木曜日の日にちは$5に格納される。
よって、「$5が空でなければその値を適当な変数(プログラム中ではx)に保存する」という作業を最終行まで繰り返せば、最終的にはその変数に最終木曜日が格納される。
2022年5月を例にすると、プログラム中の変数xの値はTh→5→12→19→26と更新されていく。
最後に変数xの値を出力すればよい。


3.
スクリプトをex3_scr.txt、データをex3_data.txtとする。
それぞれのファイルの中身と実行結果を以下に示す。

ex3_scr.txt
----------------------------------------
{
    match($0, /(.*)([0-9]{3}).([0-9]{3}).([0-9]{3}).([0-9]{3})/, a)
    print a[1]a[5]"."a[4]"."a[3]"."a[2]
}
----------------------------------------

ex3_data.txt
----------------------------------------
osaka 130.003.125.224
----------------------------------------

実行結果
----------------------------------------
> cat ex3_data.txt | awk -f ex3_scr.txt
osaka 224.125.003.130
----------------------------------------

動作状況の様子を説明する。
match関数を使い、先頭の単語をa[1]、3桁の数字列をそれぞれa[2]からa[5]に格納する。
あとはa[2]からa[5]を並び替えてprintすればうまく出力される。


4.
絵がとても分かりやすく、理解することができた。
特に、↓の絵はawkスクリプトの基本的な書き方を示しており、actionの種類を覚えたらすぐに使えそう。
----------------------------------------
BEGIN{...}
CONDITION{action}
CONDITION{action}
END{...}
----------------------------------------








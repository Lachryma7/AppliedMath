1.
「egrep Ts\?ush\?ima ファイル名」とすればよい。
以下の例ではtest.txtというファイルから目的の文字列を含む行を探して表示している。
------------------------------------------------------------
> cat test.txt 
Tsushima
Tsusima
Tushima
Tusima
Tsushimasan
Mr.Tsushima
tsushima
Tsu-shi-ma
> egrep Ts\?ush\?ima test.txt
Tsushima
Tsusima
Tushima
Tusima
Tsushimasan
Mr.Tsushima
------------------------------------------------------------


2.
「sed  -e 's/^/>/g' 元ファイル名 > 新ファイル名」とすればよい。
以下の例ではtest.txtというファイルの中身の行頭全てに「>」という一文字を付け加えたものをtest2.txtに出力している。
------------------------------------------------------------
> cat test.txt
Tsushima
Tsusima 
Tushima
Tusima
Tsushimasan
Mr.Tsushima
tsushima
Tsu-shi-ma
> cat test2.txt
> sed  -e 's/^/>/g' test.txt > test2.txt
> cat test2.txt 
>Tsushima
>Tsusima
>Tushima
>Tusima
>Tsushimasan
>Mr.Tsushima
>tsushima
>Tsu-shi-ma
------------------------------------------------------------


3.
年月日を以下のように定義する。
年：1000から2999までの4桁表記
月：1から12までの1桁または2桁表記
日：1から31までの1桁または2桁表記
また、うるう年や31日まで存在しない月は考慮しない。
「sed -f スクリプトファイル名 元ファイル名 > 新ファイル名」とすればよい。
スクリプトファイルの中身については下の例の中で記載している。
以下の例ではtest3.txtに記載したスクリプトに基づいてtest4.txtの年月日を変換したものをtest5.txtに出力している。
------------------------------------------------------------
> cat test3.txt 
s/\([12][0-9]\{3\}\).0\?1.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Jan\/\1/g
s/\([12][0-9]\{3\}\).0\?2.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Feb\/\1/g
s/\([12][0-9]\{3\}\).0\?3.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Mar\/\1/g
s/\([12][0-9]\{3\}\).0\?4.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Apr\/\1/g
s/\([12][0-9]\{3\}\).0\?5.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/May\/\1/g
s/\([12][0-9]\{3\}\).0\?6.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Jun\/\1/g
s/\([12][0-9]\{3\}\).0\?7.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Jul\/\1/g
s/\([12][0-9]\{3\}\).0\?8.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Aug\/\1/g
s/\([12][0-9]\{3\}\).0\?9.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Sep\/\1/g
s/\([12][0-9]\{3\}\).10.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Oct\/\1/g
s/\([12][0-9]\{3\}\).11.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Nov\/\1/g
s/\([12][0-9]\{3\}\).12.\(0\?[1-9]\|[12][0-9]\|3[01]\)/\2\/Dec\/\1/g⏎
> cat test4.txt
2022.05.18
1999.4.8⏎
> cat test5.txt
> sed -f test3.txt test4.txt > test5.txt
> cat test5.txt
18/May/2022
8/Apr/1999⏎
------------------------------------------------------------


4.
Regex CrosswordのBeginnerを完了した。
完了した画面のスクリーンショットをこのメールに添付している。


5.
問題文で示されていたBBC blogの本文のみを対象とした。
上位10単語を以下に示す。
------------------------------------------------------------
     45 the
     40 of
     31 to
     31 and
     20 in
     19 a
     15 we
     14 is
     12 that
     11 it
------------------------------------------------------------
また、上位116単語についてgnuplotを用いてグラフを作成した。
素のグラフを「graph1」、両軸を対数にしたグラフを「graph2」としてこのメールに添付している。
グラフ中の「a」は出現回数を順番に格納した一次元配列の名前であり、特に意味はない。
両軸を対数にしたグラフを見ると、あまりきれいではないがZipfの法則が一応成り立っているように見える。


6.
複雑な処理もテキスト処理だけを組み合わせて行っているので、処理速度は記事で紹介されている単純な仕組みのほうが優れていると思う。
しかし、拡張性や他のソフトとの連携を考えると、一般的なRDBなどのほうがサポートが豊富で扱いやすい気がする。
現状は単純な仕組みでも困らないかもしれないが、将来的に拡張したり他のソフトとの連携が必要になったりしたときに困らないかが少し心配である。

